[{"author":"Anthony Koch","title":"Image compressors compared","tags":["nextjs","review"],"id":11,"created_at":"2019-02-06T00:00:00.000Z","importBasename":"2019-02-06-image-compressors-compared","excerpt":"<p>I recently saw a question on reddit asking what the best way to optimize images was. Everyone seemed to respond with a different answer, with some recommending apps, some websites, and others CLI utilities.</p>\n","humanized":{"created_at":"February, 5 2019"},"url":"/blog/image-compressors-compared","slug":"image-compressors-compared"},{"author":"Anthony Koch","title":"NextJS Impressions","tags":["nextjs","review"],"id":10,"created_at":"2018-10-09T00:00:00.000Z","importBasename":"2018-10-09-nextjs-impressions","excerpt":"<p>Server-Side Rendering (SSR) seems to be all the rage nowadays, so I'd thought I'd get in on the action by trying out <a href=\"https://nextjs.org\">NextJS</a>, which is a framework for writing SSR applications in React. Next allows rendering your React application pages to HTML on the server, meaning that users be able to see your application interface before React has even loaded into the browser.</p>\n","humanized":{"created_at":"October, 8 2018"},"url":"/blog/nextjs-impressions","slug":"nextjs-impressions"},{"author":"Anthony Koch","title":"OR operator gotcha","tags":["javascript","anti-patterns","operators"],"id":9,"skip":{"section":"#the-gotcha"},"created_at":"2018-08-29T00:00:00.000Z","importBasename":"2018-08-29-or-operator-gotcha","excerpt":"<p>It's become a common pattern in the JavaScript world to use the <code>||</code> (called the &quot;logical or&quot;) operator for the purpose of setting a default value for a function argument. While it works quite well in most cases, but there are two cases where troubles may arise.</p>\n","humanized":{"created_at":"August, 28 2018"},"url":"/blog/or-operator-gotcha","slug":"or-operator-gotcha"},{"author":"Anthony Koch","title":"Use normalize css","tags":["css","normalize"],"id":8,"created_at":"2018-08-03T00:00:00.000Z","importBasename":"2018-08-03-use-normalize-css","excerpt":"<p>To use <code>normalize.css</code> or to not use <code>normalize.css</code>. That is the question. I'll say that if you're supporting older browsers (especially IE), you should definitely be using it. However, before we get into why you should use it, let's go over what CSS resets are and how they differ from <code>normalize.css</code>.</p>\n","humanized":{"created_at":"August, 2 2018"},"url":"/blog/use-normalize-css","slug":"use-normalize-css"},{"author":"Anthony Koch","title":"Just Nuxt Things","tags":["nuxt","vue","webpack"],"id":7,"created_at":"2018-07-29T00:00:00.000Z","importBasename":"2018-07-29-just-nuxt-things","excerpt":"<p>I rewrote my website and blog using <a href=\"https://nuxtjs.org/\">nuxt.js</a>. The experience did not come without a bit of blood, sweat, and tears, but I'm happy with the end result. This is not so much a tutorial as it is a reflection on the experience and why I did what I did.</p>\n","humanized":{"created_at":"July, 28 2018"},"url":"/blog/just-nuxt-things","slug":"just-nuxt-things"},{"author":"Anthony Koch","title":"Understanding JavaScript Prototypes","tags":["JavaScript","prototypes"],"id":6,"created_at":"2016-01-21T00:00:00.000Z","importBasename":"2016-01-21-understanding-javascript-prototypes","excerpt":"<p>Several months ago, I set out to get a deeper understanding of JavaScript, specifically in the area of prototypes. Prototypes were a fuzzy concept for me. I sort of knew how to use them, but didn't fully understand them. After a lot of study, I've started to see the picture of how prototypes work, and that they are not as complicated as I first thought.</p>\n","humanized":{"created_at":"January, 20 2016"},"url":"/blog/understanding-javascript-prototypes","slug":"understanding-javascript-prototypes"},{"author":"Anthony Koch","title":"Medium style image loading","tags":["stackblur","medium","lazy loading"],"id":5,"created_at":"2016-01-07T00:00:00.000Z","importBasename":"2016-01-07-medium-style-images","excerpt":"<p>I was on the <a href=\"https://medium.com/\">Medium</a> website and noticed a cool effect  they do when they lazy load their images. The image first appears blurry, and then slowly unblurs or fades out to reveal the actual image. I thought this was pretty cool, and wanted to see if I could achieve a similar effect.</p>\n","humanized":{"created_at":"January, 6 2016"},"url":"/blog/medium-style-images","slug":"medium-style-images"},{"author":"Anthony Koch","title":"Why you shouldn't loop arrays with for-in","tags":["JavaScript","arrays"],"id":4,"created_at":"2015-12-03T00:00:00.000Z","importBasename":"2015-12-03-why-you-shouldnt-loop-arrays-with-for-in","excerpt":"<p>I had a friend ask me why you shouldn't iterate over arrays with a for-in loop, since after all, when he tried it everything worked as expected. Well, the reasoning for why you shouldn't do this is not immediately apparent, especially if you do not understand how property lookup and prototypes work.</p>\n","humanized":{"created_at":"December, 2 2015"},"url":"/blog/why-you-shouldnt-loop-arrays-with-for-in","slug":"why-you-shouldnt-loop-arrays-with-for-in"},{"author":"Anthony Koch","title":"Remember directories in Con Emu","tags":["con emu","command line"],"id":3,"created_at":"2015-11-15T00:00:00.000Z","importBasename":"2015-11-15-remember-directories-in-con-emu","excerpt":"<p>After an hour of research, trial, and error, I finally figured out how to get Con Emu to remember directories for tabs using Git Bash. When I first started using Con Emu, I swear it used to do this by default, but I guess updates in Con Emu or the Git Bash shell broke this feature. Either way, I've found a solution that worked for me to get this feature back.</p>\n","humanized":{"created_at":"November, 14 2015"},"url":"/blog/remember-directories-in-con-emu","slug":"remember-directories-in-con-emu"},{"author":"Anthony Koch","title":"The tools I use","tags":["development","tools"],"id":2,"created_at":"2015-08-21T00:00:00.000Z","importBasename":"2015-08-21-the-tools-i-use","excerpt":"<p>This is an overview of some of the development tools I've found useful, as well as some opinions and experiences I have had with them.</p>\n","humanized":{"created_at":"August, 20 2015"},"url":"/blog/the-tools-i-use","slug":"the-tools-i-use"},{"author":"Anthony Koch","title":"My favorite features of ES2015","tags":["JavaScript","ES2015"],"id":1,"created_at":"2015-08-17T00:00:00.000Z","importBasename":"2015-08-17-favorite-features-of-ES2015","excerpt":"<p>ES2015, formerly called ES6, brings a lot of great features to JavaScript. A lot of the new features provide a much cleaner syntax for common tasks, and makes writing JavaScript so much better. After using these features for a while, I can't imagine going back to ES5. Here's an overview of my favorite features of ES2015.</p>\n","humanized":{"created_at":"August, 16 2015"},"url":"/blog/favorite-features-of-ES2015","slug":"favorite-features-of-ES2015"}]