/**
 * Contains utility functions
 */

/**
 * Returns a color from the colors map
 * @type {Color}
 */
@function color($key: 'primary', $variant: 'base')
	$color: null
	$color-spectrum: map-get($colors, $key)

	@if $color-spectrum
		$color: map-get($color-spectrum, $variant)

	@return $color



/**
 * Returns a lightness variant setting by name
 * @param  {String} $variant
 * @return {Number}
 */
@function fontsize($variant)
	$font-size: map-get($font-sizes, $variant)
	@return $font-size



/**
 * Returns a breakpoint number from the breakpoints map
 * @param  {String} $key
 * @return {Number}
 */
@function breakpoint($key)
	@return map-get($breakpoints, $key)



@function zindex($key)
	@return map-get($z-indexes, $key)



/**
 * Returns half of the number passed
 * @param  {Number} $n
 * @return {Number}
 */
@function half($n)
	@return ($n / 2)

/**
 * Returns a quarter of the number passed
 * @param  {Number} $n
 * @return {Number}
 */
@function quarter($n)
	@return ($n / 4)

/**
 * Returns the number passed times 2
 * @param  {Number} $n
 * @return {Number}
 */
@function double($n)
	@return ($n * 2)

/**
 * Returns the number passed times 3
 * @param  {Number} $n
 * @return {Number}
 */
@function triple($n)
	@return ($n * 3)

/**
 * Returns the number passed times 4
 * @param  {Number} $n
 * @return {Number}
 */
@function quadruple($n)
	@return ($n * 4)



/**
 * Calculates the width of a column based on the default
 * parameter $grid-columns
 * Example:
 * 		$width: grid-column(1) // 8.33333%
 * 		$width: grid-column(1, $grid-columns-count: 15) // 6.66667%
 *
 * @param {number} column       The number of columns to span
 * @param {number} grid-columns The total number of columns in the grid
 * @return {percentage}
 */
@function grid-column($column, $grid-columns: 12)
	$width: ($column / $grid-columns)
	@return percentage($width)



/**
 * Get an opacity level from settings
 * @param  {String} $level
 * @return {Number}
 */
@function opacity($level)
	@return map-get($opacities, $level)



/**
 * Checks if a list has the value passed
 * @param  {list}    $list
 * @param  {*}       $var
 * @return {boolean}
 */
@function contains($list, $var)
	@return (index($list, $var) != null)



/**
 * Returns the number signed as negative
 * @param  {number} $n
 * @return {number}
 */
@function negative($n)
	@return -(abs($n))



@function colorvariant($color, $variant)
	@if type-of($color) != color
		@error 'First argument should be a color'

	@return map-get(getvariants($color), $variant)



/**
 * Returns the abbreviation for the name passed.
 * @param  {string} $name
 * @return {string}
 */
@function abbr($name)
	@return map-get($abbreviations, $name)



@function grayscale($variant)
	@return map-get($color-grayscale, $variant)


/**
 * Returns an image prefixed with a path. This does not smartly join the paths,
 * it only concatenates the two parts together.
 *
 * Note: The path in $config should end with a forward slash, e.g. '../images/'
 *
 * @param  {String} $url
 * @return {String} The image prefixed with the path
 */
@function image($url)
	@return map-get($config, 'images') + $url